# FloatChat - Ocean Data Query System
# Docker Compose Configuration for Complete Application Stack

services:
  # PostgreSQL Database with PostGIS Extension
  postgres:
    image: postgis/postgis:15-3.3
    container_name: floatchat-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: floatchat_ocean_data
      POSTGRES_USER: floatchat_user
      POSTGRES_PASSWORD: floatchat_secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Copy\ of\ ARGO_Data\(1\).xlsx:/app/data/ARGO_Data.xlsx:ro
    ports:
      - "5432:5432"
    networks:
      - floatchat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U floatchat_user -d floatchat_ocean_data"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FloatChat API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: floatchat-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=floatchat_ocean_data
      - DB_USER=floatchat_user
      - DB_PASSWORD=floatchat_secure_password_2024
      - FLASK_ENV=production
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
    volumes:
      - ./plots:/app/plots
      - ./build:/app/build:ro
    ports:
      - "5000:5000"
    networks:
      - floatchat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend Development Server (only for development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-dev
    container_name: floatchat-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - floatchat-network
    profiles:
      - development

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: floatchat_postgres_data

# Custom network for service communication
networks:
  floatchat-network:
    driver: bridge
    name: floatchat-network